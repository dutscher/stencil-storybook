import { Component, State, h } from '@stencil/core';
import BEM, { MODIFIER } from './bem';
import { setupSpec } from '../../tests/setup';

describe('MODIFIER', () => {
  @Component({
    tag: 'cmp-block',
  })
  class wbcmp {
    @State() stateIsWhatever: boolean = false;
    readonly componentName: string = 'block';
    render() {
      return (
        <div class={BEM(this, 'authenticated', this.stateIsWhatever && 'is-active')}>Hallo</div>
      );
    }
  }

  const block = new wbcmp();
  const modifier = 'modifier';
  const modifier2 = 'modifier2';
  const modifier3 = 'modifier3';

  it('modifier', () => {
    expect(MODIFIER(block)).toBe('');
    expect(MODIFIER(block, modifier)).toBe(`${block.componentName}--${modifier}`);
    expect(MODIFIER(block, modifier, modifier2, modifier3)).toBe(
      `${block.componentName}--${modifier} ${block.componentName}--${modifier2} ${block.componentName}--${modifier3}`,
    );
  });
});

describe('BEM', () => {
  @Component({
    tag: 'cmp-block',
  })
  class wbcmp {
    @State() stateIsWhatever: boolean = false;
    readonly componentName: string = 'block';
    render() {
      return (
        <div class={BEM(this, 'authenticated', this.stateIsWhatever && 'is-active')}>Hallo</div>
      );
    }
  }

  const block = new wbcmp();
  const element = 'element';
  const modifier = 'modifier';
  const modifier2 = 'modifier2';
  const modifier3 = 'modifier3';

  it('block', () => {
    expect(BEM(block)).toBe(block.componentName);
  });

  it('block element', () => {
    expect(BEM(block, element)).toBe(`${block.componentName}__${element}`);
  });

  it('block element modifiers', () => {
    const basis = `${block.componentName}__${element}`;
    expect(BEM(block, element, modifier)).toBe(`${basis} ${basis}--${modifier}`);

    expect(BEM(block, element, modifier, modifier2)).toBe(
      `${basis} ${basis}--${modifier} ${basis}--${modifier2}`,
    );

    expect(BEM(block, element, modifier, modifier2, modifier3)).toBe(
      `${basis} ${basis}--${modifier} ${basis}--${modifier2} ${basis}--${modifier3}`,
    );
  });

  it('block without element but modifier', () => {
    const basis = `${block.componentName}`;
    expect(BEM(block, '', modifier)).toBe(`${basis} ${basis}--${modifier}`);

    expect(BEM(block, '', modifier, modifier2)).toBe(
      `${basis} ${basis}--${modifier} ${basis}--${modifier2}`,
    );
  });

  it('block without element but empty modifier', () => {
    const basis = `${block.componentName}`;
    expect(BEM(block, '', ' ', '   ', '  ')).toBe(`${basis}`);
  });

  it('block element modifier with conditions', () => {
    const basis = `${block.componentName}`;
    expect(BEM(block, 'cool', false && 'jojo')).toBe(`${basis}__cool`);
    expect(BEM(block, 'cool', true && 'jojo')).toBe(`${basis}__cool ${basis}__cool--jojo`);

    block.stateIsWhatever = false;
    expect(
      BEM(
        block,
        'authenticated',
        block.stateIsWhatever && 'is-active',
        block.stateIsWhatever && 'zack',
      ),
    ).toBe(`${basis}__authenticated`);

    block.stateIsWhatever = true;
    expect(
      BEM(
        block,
        'authenticated',
        block.stateIsWhatever && 'is-active',
        block.stateIsWhatever && 'zack',
      ),
    ).toBe(
      `${basis}__authenticated ${basis}__authenticated--is-active ${basis}__authenticated--zack`,
    );
  });

  it('test js in wbcmp', async () => {
    const { page, component, changeState } = await setupSpec(wbcmp);
    expect(component).not.toBeNull();
    expect(component.outerHTML).toMatchSnapshot();

    // change state of component
    changeState('stateIsWhatever', true);
    await page.waitForChanges();

    expect(component.outerHTML).toMatchSnapshot();
  });
});
